-# we need to break from the .container and
-# also surround everything in a form

- content_for(:header) do
  / header overridden
- content_for(:main_container_class) {'non-container'}

= semantic_form_for(@response_set, :as => :r, :url => surveyor.update_my_survey_path, :html => {:method => :put, :id => "survey_form"}) do |f|

  .affixed
    %header
      .container
        .row
          .span9
            %h1 New Certificate
            %h3{'data-bind-to-input' => @survey.dataset_title}= @response_set.title
          .span3
            - if user_signed_in?
              = f.submit t('surveyor.click_here_to_finish'), :name => :finish, :class => 'btn btn-primary btn-large'
            - else
              =link_to t('surveyor.click_here_to_finish'), '#save-and-finish-modal', :class => 'btn btn-primary btn-large', :role=>"button", 'data-toggle' => "modal"


  = render :partial => 'status_panel'
  = render :partial => 'shared/flashes'

  #surveyor{class: params[:highlight_mandatory] ? 'highlight-mandatory' : ''}
    = hidden_field_tag :surveyor_javascript_enabled, false

    .container
      .row
        .lead.span8= @survey.translation(I18n.locale)[:description].try(:html_safe)

    = render 'partials/dependents' unless @dependents.empty?

    -# If there were no responses by the user, the cache the blank survey for
    -# other new users
    - if @response_set.responses.empty?
      = cache("blank_survey_#{@response_set.survey_id}") do
        = render :partial => '/partials/section', :collection => @sections, :as => :section, :locals => {:f => f}
    - else # no cache
      = render :partial => '/partials/section', :collection => @sections, :as => :section, :locals => {:f => f}

:javascript
  $(document).ready(function() {
    $('fieldset.question-row').each(function(){
      var $question = $(this),
          $label = $question.find('label.question_label'),
          $requirements = $question.closest('li.container').find('fieldset.q_label'),
          text = '';
      if ($question.is('.mandatory') || $requirements.is('.requirement_basic')) {
        text = '#{t('requirement_label.requirement')}';
      } else if ($requirements.is('.requirement_pilot')) {
        text = '#{t('requirement_label.requirement_pilot')}';
      } else if ($requirements.is('.requirement_standard')) {
        text = '#{t('requirement_label.requirement_standard')}';
      } else if ($requirements.is('.requirement_exemplar')) {
        text = '#{t('requirement_label.requirement_exemplar')}';
      }
      
      if (text !== '') {
        $label.append(' <small>' + text + '</small>');
      }
    });
    
    // Resolve URLs

    $('input[type=url]').change(function () {
      var el = this
      var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");
      if(regex.test(el.value)) {
        $(el).parent().spin({lines: 8, length: 4, width: 3, radius: 5, direction: 1, color: '#000', speed: 1, trail: 60, top: '70px', left: '750px', zIndex: 9});
        $.getJSON('/resolve', { url: el.value } )
          .done(function(json) {
            $(el).parent().spin(false);
            if (json.status == 200) {
              $(el).attr('class', 'string')
              $(el).parent().next('.url_error').attr('class', 'span7 url_error hidden');
            } else {
              $(el).attr('class', 'string fail')
              $(el).parent().next('.url_error').attr('class', 'span7 url_error');
            }
          });
      }
    })
    
    // Data Kitten Stuff
    $('#r_2_string_value').change(function () {
      var el = this
      var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");
      if(regex.test(el.value)) {
        $(el).parent().spin({lines: 8, length: 4, width: 3, radius: 5, direction: 1, color: '#000', speed: 1, trail: 60, top: '70px', left: '750px', zIndex: 9});
        $.getJSON('/data_kitten', { url: el.value } )
          .done(function(json) {
            // Title
            $('#r_1_string_value').val(json.title)
            
            if (json.publishers.length > 0) {
              // Publisher name
              $('#r_3_string_value').val(json.publishers[0].name)
              // Publisher URL
              $('#r_4_string_value').val(json.publishers[0].homepage)
            }
            
            // Data type
            
            if (json.update_frequency.length == 0 && json.distributions.length == 1) {
              // One-off release of a single dataset
              $('#r_5_answer_id_4').prop('checked', true)
            } else if (json.update_frequency.length == 0 && json.distributions.length > 1) {
              // One-off release of a set of related datasets
              $('#r_5_answer_id_3').prop('checked', true)
            } else if (json.update_frequency.length > 0 && json.distributions.length > 1) {
              // Ongoing release
              $('#r_5_answer_id_5').prop('checked', true)
            }
            
            // A service or API for accessing open data
            if (json.title.indexOf("API") >= 0 || json.description.indexOf("API") >= 0 ) {
              $('#r_5_answer_id_6').prop('checked', true)
            }
                        
            // Rights information
            if (json.rights) {
              // Yes, you have the rights to publish this data as open data
              $('#r_6_answer_id_9').prop('checked', true)
              // Rights statement
              $('#r_16_string_value').val(json.rights.uri)
              
              // Data License
              switch(json.rights.dataLicense) {
                case "http://opendatacommons.org/licenses/by/":
                  $('#r_22_answer_id').val(34)
                  break;
                case "http://opendatacommons.org/licenses/odbl/":
                  $('#r_22_answer_id').val(35)
                  break;
                case "http://opendatacommons.org/licenses/pddl/":
                  $('#r_22_answer_id').val(36)
                  break;
                case "http://creativecommons.org/publicdomain/zero/1.0/":
                  $('#r_22_answer_id').val(37)
                  break;
                case "http://reference.data.gov.uk/id/open-government-licence":
                  $('#r_22_answer_id').val(38)
                  break;
              }
              
              // Content License
              switch(json.rights.contentLicense) {
                case "http://creativecommons.org/licenses/by/2.0/uk/":
                  $('#r_29_answer_id').val(52)
                  break;
                case "http://creativecommons.org/licenses/by-sa/2.0/uk/":
                  $('#r_29_answer_id').val(53)
                  break;
                case "http://creativecommons.org/publicdomain/zero/1.0/":
                  $('#r_29_answer_id').val(54)
                  break;
                case "http://reference.data.gov.uk/id/open-government-licence":
                  $('#r_29_answer_id').val(55)
                  break;
              }
              
              // Does your data documentation contain machine readable documentation for:
              
              // Title
              if (json.title.length > 0) {
                $('#r_100_answer_id_185').prop('checked', true)
              }

              // Description
              if (json.description.length > 0) {
                $('#r_101_answer_id_186').prop('checked', true)
              }
              
              // Publisher
              if (json.publishers.length > 0) {
                $('#r_108_answer_id_193').prop('checked', true)
              }
              
              // Frequency of releases
              if (json.update_frequency) {
                $('#r_104_answer_id_189').prop('checked', true)
              }
              
              // Keywords
              if (json.keywords.length > 0) {
                $('#r_112_answer_id_197').prop('checked', true)
              }
              
            }
          });
      }
    });
    
  });

= render :partial => 'surveyor/save_and_finish_modal' unless user_signed_in?


:javascript
  $(document).ready(function() {
    $("input#surveyor_javascript_enabled").val(true);
  });
